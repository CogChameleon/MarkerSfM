#!/usr/bin/env python
import os.path, sys
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

import argparse
import logging
import time

from opensfm import dataset
from opensfm import exif


logging.basicConfig(format='%(asctime)s %(message)s', level=logging.INFO)

parser = argparse.ArgumentParser(description="Extract camera information from images' EXIF tags")
parser.add_argument('dataset', help='the dataset to process')
args = parser.parse_args()

start = time.time()
data = dataset.DataSet(args.dataset)

camera_models = {}
for image in data.images():
    logging.info('Extracting focal lengths for image {}'.format(image))

    # EXIF data in Image
    d = exif.extract_exif_from_file(data.load_image(image))

    # Image Height and Image Width
    if not data.config['use_exif_size']:
        d['height'], d['width'] = data.image_as_array(image).shape[:2]

    data.save_exif(image, d)

    if d['camera'] not in camera_models:
        calib = (exif.hard_coded_calibration(d)
            or exif.focal_ratio_calibration(d)
            or exif.default_calibration(data))

        camera_models[d['camera']] = {
            'width': d['width'],
            'height': d['height'],
            'projection_type': d.get('projection_type', 'perspective'),
            "focal_prior": calib['focal'],
            "k1_prior": calib['k1'],
            "k2_prior": calib['k2'],
            "focal": calib['focal'],
            "k1": calib['k1'],
            "k2": calib['k2'],
        }

# Override any camera that is specified in the camera models overrides file.
if data.camera_models_overrides_exists():
    camera_models_overrides = data.load_camera_models_overrides()
    for key, value in camera_models_overrides.items():
        camera_models[key] = value

data.save_camera_models(camera_models)

end = time.time()
with open(data.profile_log(), 'a') as fout:
    fout.write('focal_from_exif: {0}\n'.format(end - start))
